/* tslint:disable */
/* eslint-disable */
/**
 * Flyo Nitro
 * This document provides a comprehensive overview of all the endpoints available for Flyo Nitro, a powerful platform designed to facilitate the development of websites. Flyo Nitro is built upon three strategic pillars that play a central role in website development:  + Config: The config component is responsible for loading all the necessary elements required for seamless navigation within the website layout. This includes crucial elements like the navigation menu or global content, such as the \"Locations\" section of an entity, which can be utilized in the footer across all pages. + Pages: Pages are evaluated based on their unique slug (path) and encompass all the content needed to populate a specific page. This includes various content elements, known as blocks, as well as meta information like \"og-descriptions.\" Additionally, pages can dynamically incorporate content from entities by employing mapping techniques. + Entity: Entities can be retrieved by utilizing a unique identifier, which can be configured within Flyo Nitro. Each entity provides comprehensive details in the form of fields, offering specific content tailored to a particular context.  Furthermore, it is important to distinguish between the **development** and **production** environments in Flyo Nitro. In the development environment, any changes made to data within the Flyo User Interface are immediately accessible, even without saving. This feature enables users to have a live preview of the changes during data entry. On the other hand, the production environment exclusively utilizes saved data, ensuring that only finalized content is displayed.  For more detailed documentation in German, please visit: dev.flyo.cloud
 *
 * The version of the OpenAPI document: 1.0.0-beta.197
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FieldAddress
 */
export interface FieldAddress {
    /**
     * 
     * @type {number}
     * @memberof FieldAddress
     */
    zip?: number;
    /**
     * 
     * @type {string}
     * @memberof FieldAddress
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldAddress
     */
    street_name?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldAddress
     */
    street_nr?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldAddress
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldAddress
     */
    address?: string;
    /**
     * 
     * @type {number}
     * @memberof FieldAddress
     */
    cords_lat?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldAddress
     */
    cords_lng?: number;
}

/**
 * Check if a given object implements the FieldAddress interface.
 */
export function instanceOfFieldAddress(value: object): boolean {
    return true;
}

export function FieldAddressFromJSON(json: any): FieldAddress {
    return FieldAddressFromJSONTyped(json, false);
}

export function FieldAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldAddress {
    if (json == null) {
        return json;
    }
    return {
        
        'zip': json['zip'] == null ? undefined : json['zip'],
        'city': json['city'] == null ? undefined : json['city'],
        'street_name': json['street_name'] == null ? undefined : json['street_name'],
        'street_nr': json['street_nr'] == null ? undefined : json['street_nr'],
        'street': json['street'] == null ? undefined : json['street'],
        'address': json['address'] == null ? undefined : json['address'],
        'cords_lat': json['cords_lat'] == null ? undefined : json['cords_lat'],
        'cords_lng': json['cords_lng'] == null ? undefined : json['cords_lng'],
    };
}

export function FieldAddressToJSON(value?: FieldAddress | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'zip': value['zip'],
        'city': value['city'],
        'street_name': value['street_name'],
        'street_nr': value['street_nr'],
        'street': value['street'],
        'address': value['address'],
        'cords_lat': value['cords_lat'],
        'cords_lng': value['cords_lng'],
    };
}

